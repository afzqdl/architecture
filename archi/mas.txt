主程序-子程序体系结构的基本原理包括以下几点：
1、模块化：将程序划分为多个模块，每个模块对应一个子程序，负责执行特定的功能。这样可以将复杂的问题分解为更小的、可管理的部分，简化开发和维护过程。
2、封装：将每个子程序封装为独立的、可调用的单元。子程序隐藏了内部实现细节，只暴露必要的接口给主程序和其他子程序使用。这样可以提高代码的可重用性和安全性。
3、参数传递：主程序可以向子程序传递参数，用于控制子程序的行为或提供必要的输入数据。子程序执行完成后，可以返回结果给主程序。通过参数传递，实现了主程序与子程序之间的数据交互。
4、控制流程：主程序负责决定何时调用哪个子程序，并根据需要传递参数。子程序执行完后，控制权返回给主程序，主程序可以根据返回结果做进一步的处理或决策。
5、主程序-子程序体系结构可以提高程序的可读性、可维护性和可扩展性。它将复杂的任务分解为更小的模块，使得程序的设计和开发更加灵活和可控。同时，子程序的重用性也可以减少代码的冗余，提高开发效率。

代码结构：
1、run() 方法是程序的入口点，它创建了一个 MainAndSubroutine 对象，并依次调用 input()、shift() 和 output() 方法来完成整个任务。
2、input() 方法用于从指定的文件中读取数据，并将每行数据存储在 lineTxt 列表中。
3、output() 方法用于将列表中的字符串逐行写入到指定的文件中。
4、shift() 方法将 lineTxt 列表中的数据复制到 word 数组中，然后创建一个 Solution 对象，并调用其 fullJustify() 方法对 word 数组进行处理，返回一个字符串列表。
总而言之：这段代码采用了主程序-子程序体系结构。MainAndSubroutine 类是主程序，负责协调和控制程序的执行流程。它调用了 input() 方法读取数据，然后调用 shift() 方法进行处理，最后调用 output() 方法将结果写入文件。input()、shift() 和 output() 方法则是子程序，负责执行特定的任务。

主要功能代码：
    public List<String> shift() {
        word = new String[lineTxt.size()];
        int i = 0;
        for (String line : lineTxt) {
            word[i++] = line;
        }
        Solution solution = new Solution();
        List<String> list = new ArrayList<>();
        list = solution.fullJustify(word, maxWidth);
        return list;
    }